#!/usr/bin/expect
source tests/common.tcl

set step -1
set failed 0
set testTitle "Check File Validation with Valid file"

proc testConfig {} {
	set testLine [createTestLine 0:0 0:1 1:1 1:0]
	createTestFile $testLine
}

proc testClearConfig {} {
}

proc test_stepByStep {} {
	global failed step output exitCode
	if {$failed} {
		testClearConfig
		exit
	}

	incr step
	
	switch $step {
		0 {puts "Step $step: Prepare initial Config"
			testConfig
			test_stepByStep
		}
		1 {puts "Step $step: Run program with valid test file"
			set exitCode [catch {exec python main.py test.file} output]
			test_stepByStep
		}
		2 {puts "Step $step: Check file is valid"
			if {[regexp "invalid" $output]} {set failed 1}
			if {$failed} {logResult $step "FAIL" "Reported Invalid"}
			test_stepByStep
		}
		3 {puts "Step $step: Create Multiple line Valid File"
			set testLine1 [createTestLine 0:0 0:1 1:1 1:0]
			set testLine2 [createTestLine 12:0 0:61 311:121 7861:0]
			set testLine3 [createTestLine 0:320 0:781 121:4121 31:0]
			createTestFile $testLine1 $testLine2 $testLine3
			test_stepByStep
		}
		4 {puts "Step $step: Run program with valid test file"
			set exitCode [catch {exec python main.py test.file} output]
			test_stepByStep
		}
		5 {puts "Step $step: Check file is valid"
			if {[regexp "invalid" $output]} {set failed 1}
			if {$failed} {logResult $step "FAIL" "Multiple line file reported Invalid"}
			test_stepByStep
		}
		6 {puts "Step $step: Create one line Valid File: negative values"
			set testLine [createTestLine 0:0 0:-1 1:1 1:0]
			createTestFile $testLine
			test_stepByStep
		}
		7 {puts "Step $step: Run program with valid test file"
			set exitCode [catch {exec python main.py test.file} output]
			test_stepByStep
		}
		8 {puts "Step $step: Check file is valid"
			if {[regexp "invalid" $output]} {set failed 1}
			if {$failed} {logResult $step "FAIL" "Multiple line file reported Invalid"}
			test_stepByStep
		}
		9 {puts "Step $step: Create Multiple line Valid File: negative values"
			set testLine1 [createTestLine 0:0 0:-1 1:1 1:0]
			set testLine2 [createTestLine -21:0 0:1 1:1 1:0]
			set testLine3 [createTestLine 0:0 0:-1 1:1 -14:-60]
			createTestFile $testLine1 $testLine2 $testLine3
			test_stepByStep
		}
		10 {puts "Step $step: Run program with valid test file"
			set exitCode [catch {exec python main.py test.file} output]
			test_stepByStep
		}
		11 {puts "Step $step: Check file is valid"
			if {[regexp "invalid" $output]} {set failed 1}
			if {$failed} {logResult $step "FAIL" "Multiple line file reported Invalid"}
			test_stepByStep
		}
		default {logResult "" "PASSED"; testClearConfig; exit}
	}
}

proc test {} {
	global testTitle
	puts $testTitle
	test_stepByStep
}
test
